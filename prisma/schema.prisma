    // schema.prisma

    generator client {
    provider = "prisma-client-js"
    }

    datasource db {
    provider = "postgresql"
    url = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
    }

    enum CarType {
    SEDAN
    SUV
    HATCHBACK
    COUPE
    CONVERTIBLE
    LUXURY
    TRUCK
    }

    enum RegSpecs {
    GCC
    AMERICAN
    EUROPEAN
    JAPANESE
    CHINESE
    CANADIAN
    }

    enum UserRole {
    USER
    DEALER
    ADMIN
    }

    enum City {
    ABU_DHABI
    SHARJAH
    DUBAI
    AJMAN
    AL_AIN
    RIYADH
    JEDDAH
    DOHA
    }

    enum Make {
    TOYOTA
    MITSUBISHI
    NISSAN
    HYUNDAI
    FORD
    HONDA
    CHEVROLET
    VOLKSWAGEN
    JEEP
    KIA
    JETOUR
    LOTUS
    LAND_ROVER
    LINCOLN
    LEXUS
    MAXUS
    MASERATI
    MAZDA
    MCLAREN
    MINI
    OPEL
    DODGE
    DEVEL
    CHANGAN
    CHRYSLER
    ASTON_MARTIN
    CADILLAC
    BORGWARD
    BYD
    ABARTH
    ALFA_ROMEO
    GMC
    GENESIS
    ISUZU
    INFINITI
    HAVAL
    FOTON
    PEUGEOT
    }

    model Car {
    id                String     @default(cuid()) @id
    name              String
    price             Decimal    @db.Decimal(10, 2)
    type              CarType
    year              Int
    regSpecs          RegSpecs
    make              Make
    mileage           Int
    city              City
    images            CarImage[] 
    contactPhone      String?
    capacity          Int
    serviceHistory    Boolean    @default(false)
    accidentHistory   Boolean    @default(false)
    description       String?    @db.Text
    createdAt         DateTime   @default(now())
    updatedAt         DateTime   @updatedAt
    postedBy          User       @relation("PostedCars", fields: [postedById], references: [id])
    postedById        String
    wishedBy          User[]     @relation("Wishlist")

    @@index([make])
    @@index([year, price])
    }

    model CarImage {
    id                String     @default(cuid()) @id
    url               String
    car               Car        @relation(fields: [carId], references: [id])
    carId             String

    @@index([carId])
    }

    model User {
    id                String       @default(cuid()) @id
    name              String?
    email             String       @unique
    password          String       
    phone             String?
    profileImage      String?
    createdAt         DateTime     @default(now()) @map(name: "created_at")
    updatedAt         DateTime     @updatedAt      @map(name: "updated_at")
    wishlist          Car[]        @relation("Wishlist")
    postedCars        Car[]        @relation("PostedCars")
    role              UserRole     @default(USER)
    dealerInfo        DealerInfo?
    accounts          Account[]
    sessions          Session[]

    @@map(name: "users")
}

    model DealerInfo {
    id                String      @default(cuid()) @id
    user              User        @relation(fields: [userId], references: [id])
    userId            String      @unique
    companyName       String
    website           String?
    established       Int?
    }

    model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique@map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields:[userId], references:[id], onDelete: Cascade)
    }

    model Account {
    id                 String  @id @default(cuid())
    userId             String  @map("user_id")
    type               String
    provider           String
    providerAccountId  String  @map("provider_account_id")
    refresh_token      String?
    access_token       String?
    expires_at         Int?
    token_type         String?
    scope              String?
    id_token           String?
    session_state      String?
    oauth_token_secret String?
    oauth_token        String?

    user User @relation(fields:[userId], references:[id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    }

    model VerificationToken {
    id         Int      @id @default(autoincrement())
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    }